- name: Create AWS VPC vpc-{{ ec2_name_prefix }}
  ec2_vpc_net:
    name: "vpc-{{ ec2_name_prefix }}"
    cidr_block: "{{ec2_subnet}}"
    region: "{{ ec2_region }}"
    state: "{{ workshop_state | default(present) }}"
  register: create_vpc
  tags:
    - provision

- name: The VPC-ID for VPC named vpc-{{ ec2_name_prefix }}
  debug:
    var: create_vpc.vpc.id

- name: Create EC2 security group for VPC named vpc-{{ ec2_name_prefix }}
  ec2_group:
    name: insecure_all
    description: all ports open
    region: "{{ ec2_region }}"
    vpc_id: "{{create_vpc.vpc.id}}"
    state: "{{ workshop_state | default(present) }}"
    rules:
      - proto: all
        cidr_ip: 0.0.0.0/0
    rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0
  when: ec2_exact_count >= 1
  tags:
    - always
    - provision

- name: Create subnet for vpc-{{ ec2_name_prefix }}
  ec2_vpc_subnet:
    region: "{{ ec2_region }}"
    az: "{{ec2_az}}"
    vpc_id: "{{create_vpc.vpc.id}}"
    cidr: "{{ec2_subnet}}"
    state: "{{ workshop_state | default(present) }}"
  register: create_subnet

- name: The subnet-id for VPC named vpc-{{ ec2_name_prefix }}
  debug:
    var: create_subnet.subnet.id

- name: Create ssh key pair for workshop {{ ec2_name_prefix }}
  ec2_key:
    name: "{{ ec2_name_prefix }}"
    region: "{{ ec2_region }}"
    state: "{{ workshop_state | default(present) }}"
  register: create_key

- name: The key for for workshop {{ ec2_name_prefix }}
  debug:
    var: create_key

- name: save private key
  copy:
    content: "{{ create_key.key.private_key }}"
    dest: "./aws-private.pem"
    mode: 0600
  when: create_key.changed

- name: add the private key
  command: ssh-add ./aws-private.pem
  ignore_errors: yes

- name: vpc internet gateway is present
  ec2_vpc_igw:
    region: "{{ ec2_region }}"
    vpc_id: "{{ create_vpc.vpc.id }}"
    state: "{{ workshop_state | default(present) }}"
  register: igw

- name: vpc public subnet route table is present
  ec2_vpc_route_table:
    region: "{{ ec2_region }}"
    vpc_id: "{{ create_vpc.vpc.id }}"
    subnets:
      - "{{ create_subnet.subnet.id }}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ igw.gateway_id }}"
    state: "{{ workshop_state | default(present) }}"

- name: Create or destroy EC2 instances
  ec2:
    assign_public_ip: yes
    key_name: "{{ ec2_name_prefix }}"
    group: "{{ ec2_security_group }}"
    instance_type: "{{ ec2_instance_types[item.1.type].size }}"
    image: "{{ ec2_instance_types[item.1.type].ami_id }}"
    region: "{{ ec2_region }}"
    exact_count: "{{ ec2_exact_count }}"
    count_tag:
      Name: "{{ ec2_name_prefix }}-{{ item.0.username }}-{{ item.1.name }}"
    instance_tags:
      Name: "{{ ec2_name_prefix }}-{{ item.0.username }}-{{ item.1.name }}"
    wait: "{{ ec2_wait }}"
    vpc_subnet_id: "{{ create_subnet.subnet.id }}"
    volumes:
      - device_name: /dev/sda1
        volume_type: gp2
        volume_size: "{{ ec2_instance_types[item.1.type].disk_space }}"
        delete_on_termination: true
    state: "{{ workshop_state | default(present) }}"
  with_nested:
    - "{{ users }}"
    - "{{ ec2_lab_node_types }}"
  register: instances
  tags:
    - always
    - provision

- name: Include tasks only needed when creating instances
  include: create.yml
  static: no
  when: ec2_exact_count >= 1
  tags:
    - provision
