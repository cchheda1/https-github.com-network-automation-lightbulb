# - name: Wait for instances to finish initializing
#   pause:
#     seconds: 90
#   when: control_output | changed

- name: add ansible node to control_nodes group (BOTH MODES)
  add_host:
    name: "{{ item.invocation.module_args.instance_tags.Name }}"
    ansible_host: "{{ item.tagged_instances[0].public_ip }}"
    ansible_user: "{{ ec2_login_names[ansible_node] }}"
    ansible_port: "{{ ssh_port }}"
    groups: lab_hosts,control_nodes
  with_items: "{{ control_output.results }}"
  when:
    - item.skipped is not defined
    - "'ansible' in item.invocation.module_args.instance_tags.Name"
  changed_when: no

- name: ANSIBLE ESSENTIALS MODE TASKS
  block:
    - name: add hosts to groups (ANSIBLE ESSENTIALS MODE)
      add_host:
        name: "{{ item.invocation.module_args.instance_tags.Name }}"
        ansible_host: "{{ item.tagged_instances[0].public_ip }}"
        ansible_user: "{{ ec2_login_names[node1_node] }}"
        ansible_port: "{{ ssh_port }}"
        groups: lab_hosts,managed_nodes
      with_items:
        - "{{ node1_output.results }}"
        - "{{ node2_output.results }}"
        - "{{ node3_output.results }}"
      when:
        - item.skipped is not defined
        - "'rtr' not in item.invocation.module_args.instance_tags.Name"
        - "'ansible' not in item.invocation.module_args.instance_tags.Name"
      changed_when: no
  when: not networking

- name: ANSIBLE NETWORKING MODE TASKS
  block:
    - name: add hosts to groups (NETWORKING MODE)
      add_host:
        name: "{{ item.invocation.module_args.instance_tags.Name }}"
        ansible_host: "{{ item.tagged_instances[0].public_ip }}"
        ansible_user: "{{ ec2_login_names[host1_node] }}"
        ansible_port: "{{ ssh_port }}"
        groups: lab_hosts,managed_nodes
      with_items: "{{ host1_output.results }}"
      when:
        - item.skipped is not defined
        - "'rtr' not in item.invocation.module_args.instance_tags.Name"
        - "'ansible' not in item.invocation.module_args.instance_tags.Name"
      changed_when: no

    - name: add rtr1 to groups (NETWORKING MODE)
      add_host:
        name: "{{ item.invocation.module_args.instance_tags.Name }}"
        ansible_host: "{{ item.tagged_instances[0].public_ip }}"
        ansible_user: "{{ ec2_login_names[rtr1_node] }}"
        ansible_port: "{{ ssh_port }}"
        groups: lab_hosts,routers
      with_items:
        - "{{rtr1_output.results}}"
      when:
        - item.skipped is not defined
      changed_when: no

    - name: add rtr2 to groups (NETWORKING MODE)
      add_host:
        name: "{{ item.invocation.module_args.instance_tags.Name }}"
        ansible_host: "{{ item.tagged_instances[0].public_ip }}"
        ansible_user: "{{ ec2_login_names[rtr2_node] }}"
        ansible_port: "{{ ssh_port }}"
        groups: lab_hosts,routers
      with_items:
        - "{{rtr2_output.results}}"
      when:
        - item.skipped is not defined
      changed_when: no
  when: networking

- name: Set local username to create on instances
  set_fact:
    username: "{{ item | regex_replace('.*-(\\w*)-\\w*$','\\1') }}"
  with_items: "{{ groups.lab_hosts }}"
  delegate_to: "{{ item }}"
  delegate_facts: yes

# - name: debug control_output
#   debug:
#     var: control_output

- name: Generate student inventories
  template:
    src: "{{ networking | ternary( 'networking_instances.txt.j2' , 'instances.txt.j2' ) }}"
    dest: ./{{ item.username }}-instances.txt
  with_items: "{{ users }}"

- name: Generate student etchosts
  template:
    src: etchosts_networking.j2
    dest: ./{{ item.username }}-etchosts.txt
  with_items: "{{ users }}"
  when: networking

- name: Generate instructor inventory
  template:
    src: instructor_inventory_networking.j2
    src: "{{ networking | ternary( 'instructor_inventory_networking.j2' , 'instructor_inventory.j2' ) }}"
    dest: ./instructor_inventory.txt
